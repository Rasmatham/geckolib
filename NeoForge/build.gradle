plugins {
    id 'java'
    id 'eclipse' //both are required for the ideCopyResourcesTask
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.24,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.8.7'
    id 'net.darkhax.curseforgegradle' version '1.1.26'
    id 'org.jetbrains.gradle.plugin.idea-ext' version "1.1.10"
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

base {
    archivesName = "geckolib-neoforge-${minecraft_version}"
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true
    runs {
        client {
            workingDirectory project.file('runs/' + name)
            ideaModule("${rootProject.name}.${project.name}.main")
            singleInstance true
            taskName "${mod_id} NeoForge Client"

            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'

            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${mod_id}.mixins.json"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(":core").sourceSets.main
                }
            }
        }

        clientAlt {
            parent minecraft.runs.client
            workingDirectory project.file('runs/' + name)
            taskName "${mod_id} NeoForge Client Alt"
            args '--username', 'Alt'
        }

        server {
            workingDirectory project.file('runs/' + name)
            ideaModule("${rootProject.name}.${project.name}.main")
            singleInstance true
            taskName "${mod_id} NeoForge Server"

            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${mod_id}.mixins.json"

            mods {
                "${mod_id}" {
                    source project(":core").sourceSets.main
                    source sourceSets.main
                }
            }
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

repositories {
    maven { url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neoforge_version}"
    compileOnly project(":core")
    minecraftLibrary(group: 'com.eliotlash.mclib', name: 'mclib', version: "${mclib_version}")
    jarJar(group: 'com.eliotlash.mclib', name: 'mclib', version: "[${mclib_version},)")
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }
}

jarJar.enable()

//Make the result of jarJar the default.
tasks.jarJar.configure {
    it.archiveClassifier.set("")
    finalizedBy("reobfJarJar")
}

tasks.jar.configure {
    it.archiveClassifier.set("slim")
}


tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    from rootProject.file("LICENSE")
}

tasks.withType(JavaCompile).configureEach {
    it.options.setEncoding('UTF-8')
    it.options.release.set(17)
    source(project(":core").sourceSets.main.allSource)
}

sourcesJar {
    from project(":core").sourceSets.main.allSource
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_display_name}",
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "4",
                "Implementation-Title"    : mod_display_name + " " + project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

def resourceTargets = ['META-INF/mods.toml']
def replaceProperties = [
        minecraft_version_range: minecraft_version_range,
        neoforge_version_range: neoforge_version_range,
        neoforge_loader_version_range: neoforge_loader_range,
        mod_id: mod_id,
        mod_name: mod_display_name,
        mod_license: mod_license,
        version: version,
        mod_authors: mod_authors,
        mod_description: mod_description
]

processResources {
    from project(":core").sourceSets.main.resources

    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
            println(file.name)
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            //Excludes the non jij'd jar from being published at all.
            artifacts = [sourcesJar, javadocJar]
            jarJar.component(it)
            artifactId base.archivesName.get()
            //We don't want users to have mclib as a dep when the jar that's published already contains the dependency.
            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if ("mclib".equals(dep.artifactId.last().value().last())) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }

    repositories {
        if (System.getenv("cloudUsername") == null && System.getenv("cloudPassword") == null) {
            mavenLocal()
        }
        else maven {
            name = "cloudsmith"
            url = "https://maven.cloudsmith.io/geckolib3/geckolib/"
            credentials {
                username = System.getenv("cloudUsername")
                password = System.getenv("cloudPassword")
            }
        }
    }
}

modrinth {
		token = System.getenv("modrinthKey") ?: "Invalid/No API Token Found"
		projectId = '8BmcQJ2H' 
		versionNumber = project.version
		versionName = "NeoForge ${minecraft_version}"
		uploadFile = tasks.jarJar
		changelog = rootProject.file("changelog.txt").text
		gameVersions = [minecraft_version]
		loaders = ['neoforge']

        //https://github.com/modrinth/minotaur#available-properties
}

task publishToCurseForge(type:  net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    group = "publishing"
    apiToken = System.getenv("curseforge.apitoken") ?: "Invalid/No API Token Found"

    def mainFile = upload(388172, tasks.jarJar)
    mainFile.releaseType = "release"
    mainFile.addModLoader("NeoForge")
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion("Java 17")
    mainFile.changelog = rootProject.file("changelog.txt").text

    //https://github.com/Darkhax/CurseForgeGradle#available-properties
}

publish.finalizedBy('modrinth', 'publishToCurseForge')

